<!DOCTYPE html><html lang='ru' dir='ltr' spellcheck='false'><head><!--#include file="z.htm"--><meta name='description' content='Надёжный помощник в бесплатном и доступном изучении разработки компьютерных программ с использованием языка Си для людей всех возрастов на русском языке.'/><meta name='keywords' content='язык си, уроки си, первая программа, программа c, программа на си, компилятор, си самостоятельно, освоить си, по языку си, на си, на языке си, разработка, разработка программ, на русском, по для пк, обучение, изучение, пособие по си, учебник си, курсы си, си для детей, си для пенсионеров, си для чайников, си для всех'/><meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no'/><base target='_self'/><title>Урок 7. Первая программа на C</title><link rel='stylesheet' type='text/css' href='m.css'></head><body><!--#include file="h.htm"--><div><h2>Урок 7. Первая программа</h2><article>Цель урока: научиться компилировать и запускать программу, закодированную на языке C.<br><br>Понятия урока (необходимо выписать из толкового словаря их значения перед продолжением чтения): компилятор, транслятор, компоновщик.<br><br>Мы будем учиться писать программы для бесплатной операционной системы (ОС) на основе ядра Linux. Наиболее распространённым её дистрибутивом (пакетом поставляемых программ) является Ubuntu. Для слабых машин подойдёт её разновидность Lubuntu. Чем выше версию ОС Вы сможете установить на Вашем персональном компьютере (ПК), тем более новая версия компилятора будет с ней совместима, а значит, в нём будет больше возможностей для изучения. Кстати, обязательно убедитесь, что Вы устанавливаете стабильную (stable) версию Вашего дистрибутива Linux, иначе Вы можете столкнуться с непредсказуемыми ошибками в её поведении. Подробное описание процедуры установки ОС Вы найдёте, воспользовавшись поисковиком, например, yandex.ru. Для нашего обучения был выбран компилятор GNU Compilers Collection (GCC) со встроенным компоновщиком. Проверить наличие компилятора на Вашей машине можно, запустив приложение терминала Terminal и введя команду поиска расположения:<blockquote>whereis gcc</blockquote>Если всё прошло успешно, то Вы увидите набор путей, среди которых будет путь:<blockquote>/usr/bin/gcc</blockquote>На машине, где проверялись примеры кода, используется компилятор версии 11.2.0. Проверить версию Вашего компилятора Вы можете командой терминала:<blockquote>gcc -v</blockquote>Программисту очень важно научиться пользоваться поисковой машиной интернета, а лучше сразу несколькими, поэтому следующим Вашим заданием будет создание текстового файла (попробуйте узнать о том, как создать и сохранить текстовый файл в Linux, воспользовавшись поисковиком) с названием <i>main.c</i>. Простейшая программа на языке C выглядит так:<blockquote><code>int main(){}</code></blockquote>Введите её в точности так, как указано в примере, и сохраните файл с исходным кодом Вашей первой программы. Чтобы программа на языке C заработала, недостаточно сохранить её исходный код в текстовом файле, а нужно также её скомпилировать и скомпоновать. Это делается автоматически следующей командой (используйте этот шаблон команды в дальнейшем для всех примеров):<blockquote>gcc main.c -o run -Ofast -Wall -Wextra -pedantic -std=gnu2x -march=corei7 -mtune=corei7</blockquote>После ввода этой команды в командную строку терминала и нажатия клавиши Enter ничего выводиться не должно, а вместо этого отобразится приглашение ко вводу следующей команды. Вы можете получить одно или несколько следующих сообщений об ошибке или предупреждений. Не тревожьтесь: исправление ошибок и отладка программ - основная деятельность программиста (кодировщика), опыт в которой ценится в его работе выше всего. Если сообщение приняло вид:<blockquote>Command '<i>xx</i>' not found, but can be installed with:</blockquote> сверьте написание команды <i>gcc</i> с приведённой выше записью. Не пугайтесь, а исправьте написание в соответствии с примером, и перезапустите команду компиляции и компоновки. Чтобы не набирать команду заново, можно воспользоваться историей команд, нажам в терминале клавишу со стрелкой вверх. Если система вывела сообщение: <blockquote><pre>cc1: fatal error: <i>xxx.x</i>: No such file or directory
compilation terminated.
</pre></blockquote>исправьте написание имени файла с исходным кодом в команде на <i>main.c</i> и перезапустите команду. Если сообщение имеет вид:<blockquote>cc1: error: argument to ‘-O’ should be a non-negative integer, ‘g’, ‘s’ or ‘fast’
</blockquote>исправьте опечатку в записи ключа (параметра команды gcc, начинающегося со знака тире) <i>-Ofast</i> и перезапустите команду. Если Вы получили сообщение:<blockquote>gcc: error: unrecognized command-line option ‘-<i>xxx</i>’; did you mean ‘-<i>yyy</i>’?
</blockquote>проверьте корректность записи ключей <i>-Wall</i>, <i>-Wextra</i>, <i>-pedantic</i>, <i>-std=gnu2x</i>, <i>-march=corei7</i>, <i>-mtune=corei7</i> и наличие пробелов между всеми ключами. Если Вы видите следующее сообщение:<blockquote>main.c:1:1: error: unknown type name ‘<i>xx</i>’; did you mean ‘int’?
</blockquote>с указанием места в строке кода, где это произошло, то в этом месте Вы допустили ошибку в написании слова <i>int</i> - одного из зарезервированных служебных ключевых слов языка программирования C, которые могут быть выделены текстовым редактором особым цветом. Если в процессе компиляции отобразилось сообщение:<blockquote><pre>main.c:1:1: warning: return type defaults to ‘int’ [-Wimplicit-int]
    1 | intmain(){}
      | ^~~~~~~
main.c: In function ‘intmain’:
main.c:1:11: warning: control reaches end of non-void function [-Wreturn-type]
    1 | intmain(){}
      |           ^
/usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x1b): undefined reference to `main'
collect2: error: ld returned 1 exit status
</pre></blockquote>поставьте пробел между словами int и main и перезапустите команду. Если Вы видите сообщение:<blockquote><pre>main.c: In function ‘<i>xxx</i>’:
main.c:1:11: warning: control reaches end of non-void function [-Wreturn-type]
    1 | int <i>xxx</i>(){}
      |           ^
/usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x1b): undefined reference to `main'
collect2: error: ld returned 1 exit status</pre></blockquote>удостоверьтесь, что слово <i>main</i> записано корректно четырьмя латинскими буквами слитно, и перезапустите команду. Если же сообщение в консоли вида:<blockquote><pre>main.c:1:9: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘)’ token
    1 | int main){}
      |         ^
</pre></blockquote>верните на место открывающую круглую скобку, как это показано в коде примера, и перезапустите команду. Если Вы получили сообщение:<blockquote><pre>main.c:1:10: error: expected declaration specifiers or ‘...’ before ‘{’ token
    1 | int main({}
      |          ^
</pre></blockquote>донаберите единственную закрывающую круглую скобку после открывающей в соответствии с примером кода и перезапустите команду. Если сообщение принимает следующий вид:<blockquote><pre>main.c: In function ‘main’:
main.c:1:11: error: expected declaration specifiers before ‘}’ token
    1 | int main()}
      |           ^
main.c:3: error: expected ‘{’ at end of input
</pre></blockquote>добавьте единственную открывающую фигурную скобку перед закрывающей, как это показано в примере кода. Если Вы получили сообщение:<blockquote><pre>main.c: In function ‘main’:
main.c:1:1: error: expected declaration or statement at end of input
    1 | int main(){
      | ^~~
</pre></blockquote>добавьте в конец строки файла исходного кода единственную закрывающую фигурную скобку и перезапустите команду. Если в терминале вывелось сообщение:<blockquote><pre>main.c:3: warning: ISO C forbids an empty translation unit [-Wpedantic]
/usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x1b): undefined reference to `main'
collect2: error: ld returned 1 exit status
</pre></blockquote>Вам необходимо удостовериться, что Вы сохранили файл с исходным кодом, а также, что именно в этот файл Вы ввели исходный код из примера. Что делает эта программа: загружается в оперативную память (запускается), возвращает код успешного выполнения 0 операционной системе, выгружается из оперативной памяти (останавливается). Для запуска программы в терминале наберите:<blockquote>./run</blockquote>Если вывелось сообщение:<blockquote>bash: ./<i>xx</i>: No such file or directory
</blockquote>вернитесь к команде компиляции и компоновки стрелкой вверх и исправьте ошибку в слове <i>run</i>, затем перезапустите команду gcc в соответствии с образцом, нажав Enter. Разберём устройство текста программы. Текст состоит из двух слов, разделённых пробелом, и четырёх специальных знаков после них. Всего 12 символов. Слово main всегда присутствует в любой программе на языке C и обозначает точку входа - место текста программы, в котором команды программы начнут исполняться одна за другой после запуска. В языке C точкой входа является функция, и эта функция - единственная в программе функция, имя которой записывается как main, что в переводе с английского означает <i>главная, основная</i>. Остальные функции в программе, если они есть, должны носить другие имена. Слово int (integer в Pascal) обозначает тип данных, которые будут возвращены после завершения выполнения функции main, - в нашем случае возвращается целое число 0, поэтому выбран целочисленный тип данных int. Общепринятым считается правило, когда программы возвращают в ОС код результата выполнения типа int, поэтому функция main всегда должна иметь возвращаемый тип int. Можно явно вернуть 0 из main, что можно записать командой return. Место для ввода пользовательских команд - блок кода, обозначаемый фигурными скобками в конце записи функции main. Чтобы код стал яснее, перепишем функцию так:<blockquote><pre><code>int main()
{
// сотрите строку и наберите Ваш код
}</code></pre></blockquote>В этой программе добавлен комментарий внутри фигурных скобок. Комментарии исключаются из программы при компиляции и не влияют на размер результирующего исполнимого файла. Здесь комментарий начинается с двух служебных символов, записанных подряд, - прямых косых черт или прямых слэшей, за которыми следует текст комментария. Скомпилируйте и запустите программу командой для gcc, которая использовалась ранее, - этот процесс нужно повторять после каждого изменения кода, чтобы исключить закравшиеся ошибки. Вы увидите, что ничего не изменилось. Сотрём комментарий и запишем команду return:<blockquote><pre><code>int main()
{
	return 0;
}</code></pre></blockquote>Для этой команды есть равнозначная запись:<blockquote><pre><code>int main()
{
	return(0);
}</code></pre></blockquote>Здесь 0 - это код результата успешного выполнения программы, который наша программа должна возвращать при штатном завершении, что и происходит без этой команды. Ноль следует за командой return через пробел или сразу - в круглых скобках, что не принципиально для работы программы. В конце команды обязательно ставится знак ; (точка с запятой). Обратите внимание на отступ перед командой return, который задаётся нажатием табулятора (клавиши Tab, генерирующей фиксированное количество пробелов). Скомпилируйте и запустите программу. Ничего не должно поменяться. Если в терминале появилось сообщение наподобие:<blockquote><pre>main.c: In function ‘main’:
main.c:3:9: error: ‘retun’ undeclared (first use in this function)
    3 |         retun 0;
      |         ^~~~~
main.c:3:9: note: each undeclared identifier is reported only once for each function it appears in
main.c:3:14: error: expected ‘;’ before numeric constant
    3 |         retun 0;
      |              ^~
      |              ;
</pre></blockquote>исправьте опечатки в слове <i>return</i>, проверьте наличие пробела между командой и нулём и повторите процесс. Если сообщение приняло вид:<blockquote><pre>main.c: In function ‘main’:
main.c:3:17: error: expected ‘;’ before ‘}’ token
    3 |         return 0
      |                 ^
      |                 ;
    4 | }
      | ~  </pre></blockquote>поставьте знак точку с запятой после 0 и повторите процесс. Вовсе не обязательно оформлять код именно так. Запись могла бы выглядеть иначе:<blockquote><pre><code>int main(){return 0;}</code></pre></blockquote>хотя предыдущий способ оформления стиля является более распространённым, но важнее, чтобы код было легко изучать, понимать и повторять Вам и Вашей команде. Круглые скобки после main нужны для указания параметров функции, поэтому, если у функции нет параметров, или параметры ей не требуются, правильнее записать так:<blockquote><pre><code>int main(void)
{
	return(0);
}</code></pre></blockquote>Ключевое слово void в круглых скобках означает отсутствие каких-либо передаваемых параметров и буквально переводится как ничто. Я советую всегда на будущее включать в файл с функцией main команду для сборки программы:<blockquote><pre><code>//gcc main.c -o run -Ofast -Wall -Wextra -pedantic -std=gnu2x -march=corei7 -mtune=corei7
int main(void)
{
	return(0);
}</code></pre></blockquote>Теперь рассмотрим команду компиляции и компоновки. Часть команды<blockquote>gcc main.c</blockquote>означает: найди файл исходного кода на C с точным именем main.c в текущей директории и передай на вход утилите gcc. Имя файла должно оканчиваться на .c, чтобы компилятор автоматически выбрал язык, для исходного текста программы на котором будет осуществлена компиляция. Файл назван main не случайно - именно так называется точка входа программы на языке C, которую он содержит. Рекомендуется придерживаться такого правила: всегда называть файл с функцией main именем main с расширением c - это облегчит его поиск в большом массиве данных в крупных приложениях. Поскольку, как Вы убедились, GCC умеет выдавать разнообразные подсказки при наличии каких-либо ошибок в программе и даже часто может указать место, где нужно внести исправление, разработка больших программ на языке C вполне безопасна. Следующая часть команды:<blockquote>-o run -Ofast</blockquote>означает: скомпилируй программу с максимальной оптимизацией по быстродействию и сформируй в результате компоновки файл с точным названием run в текущей директории. И опять, файл не случайно назван говорящим именем run: наличие в дистрибутиве программы такого файла поясняет: начни работу с программой с запуска этого файла. Файл по умолчанию создаётся с разрешением на запуск. Далее идёт часть команды:<blockquote>-Wall -Wextra</blockquote>которая говорит GCC о необходимости сгенерировать все возможные предупреждения для этого исходного кода при проведении проверки перед компиляцией. После них следуют ключи:<blockquote>-pedantic -std=gnu2x</blockquote>дающие указание GCC проверить исходный код программы на точное соответствие последней версии стандарта языка C ISO C2x с расширениями GNU и вывести необходимые предупреждения. Завершает команду набор ключей<blockquote>-march=corei7 -mtune=corei7</blockquote>указывающий на необходимость оптимизации генерируемого машинного кода для конкретного процессора. В данном случае - Intel Core i7. Значения этих двух ключей должны указываться для той модели процессора, на которой предполагается выполнение программы большую часть времени. Компилятор GCC поддерживает широкий набор аппаратных платформ. Конкретные значения ключей march и mtune необходимо уточнить на сайте производителя целевой модели процессора.</article><!--#include file="f.htm"--></div></body></html>
